# –ø—Ä–æ–≤–µ—Ä–∫–∞ Undetect –±—Ä–∞—É–∑–µ—Ä - https://whoer.net/ru

import csv
import time
import pytz
import datetime
import random
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementNotInteractableException, \
                                        ElementClickInterceptedException, InvalidArgumentException


import sys
sys.path.append('D:\\Gembling\\Deepl_Python\\Deepl_Python')
from Proxy.Restart_modem.E3372_Restart_control_clas_v1 import ModemController
from app.app_user_agent_Firefox_random import get_firefox_emulation_settings


PROXY = "127.0.0.1:3128"  # IP:PORT –∏–ª–∏ "HOST:PORT" –≤–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
URLS_ADRESS = r'GOOGLE\Google_mapsCID_Poxy_bot\input\output_adress_Start_NOEND_Point_v2.txt'
FIREFOX_DRIVER_PATH = r"D:\Gembling\Deepl_Python\Deepl_Python\SETTINGS\Mozilla\geckodriver-v0.34.0-win64\geckodriver.exe"

BUSINESS_PIN = [
    '–î–ò–í–ê–ù–´, –ú–ê–¢–†–ê–°–´, –ö–†–û–í–ê–¢–ò üõãÔ∏è –°–ö–õ–ê–î –º–∞–≥–∞–∑–∏–Ω –º—è–≥–∫–æ–π –º–µ–±–µ–ª–∏ –≤ –ë–æ—Ä–∏—Å–ø–æ–ª–µ. –ö—É–ø–∏—Ç—å –∫—Ä–æ–≤–∞—Ç—å —Å –º–∞—Ç—Ä–∞—Å–æ–º - –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ö–∏–µ–≤. InstaDivan: –≤—É–ª–∏—Ü—è –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ, 1, –ë–æ—Ä–∏—Å–ø—ñ–ª—å, –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª., 08301',
    '–î–ò–í–ê–ù–´, –ú–ê–¢–†–ê–°–´, –ö–†–û–í–ê–¢–ò üõãÔ∏è –°–ö–õ–ê–î –º–∞–≥–∞–∑–∏–Ω –º—è–≥–∫–æ–π –º–µ–±–µ–ª–∏ –≤ –ë–æ—Ä–∏—Å–ø–æ–ª–µ',
    '–ö—É–ø–∏—Ç—å –∫—Ä–æ–≤–∞—Ç—å —Å –º–∞—Ç—Ä–∞—Å–æ–º –ö–∏–µ–≤ –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–ö—É–ø–∏—Ç—å –¥–∏–≤–∞–Ω –ö–∏–µ–≤ –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–ú–∞–≥–∞–∑–∏–Ω –¥–∏–≤–∞–Ω–æ–≤ –ö–∏–µ–≤ –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–¥–∏–≤–∞–Ω—ã –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–∫—É–ø–∏—Ç—å –¥–∏–≤–∞–Ω –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–∫—É–ø–∏—Ç—å –º–∞—Ç—Ä–∞—Å –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–∫—É–ø–∏—Ç—å –∫—Ä–æ–≤–∞—Ç—å –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–º–∞—Ç—Ä–∞—Å—ã –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–∫—Ä–æ–≤–∞—Ç–∏ –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–ú–µ–±–µ–ª—å –ö–∏–µ–≤ –ë–æ—Ä–∏—Å–ø–æ–ª—å InstaDivan',
    '–ú–µ–±–ª—ñ –ö–∏—ó–≤ –ë–æ—Ä–∏—Å–ø—ñ–ª—å InstaDivan',
    '–º–∞—Ç—Ä–∞—Ü–∏ –ö–∏—ó–≤ –ë–æ—Ä–∏—Å–ø—ñ–ª—å InstaDivan',
    '–¥–∏–≤–∞–Ω–∏ –ö–∏—ó–≤ –ë–æ—Ä–∏—Å–ø—ñ–ª—å InstaDivan',
    '–ë–æ—Ä–∏—Å–ø—ñ–ª—å –º–µ–±–ª—ñ InstaDivan',
    '–ë–æ—Ä–∏—Å–ø–æ–ª—å –º–µ–±–µ–ª—å InstaDivan',
]


def get_random_addresses(file_path, sample_size=20):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    return random.sample(lines, min(sample_size, len(lines)))


def create_driver_with_emulation(PROXY, FIREFOX_DRIVER_PATH):
    firefox_options = Options()
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ user-agent –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–∫—Ä—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    emulation_settings = get_firefox_emulation_settings()
    firefox_options.set_preference("general.useragent.override", emulation_settings["userAgent"])
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    firefox_options.set_preference("intl.accept_languages", "ru-RU, ru, en-US, en, uk-UA, uk, fr-FR, fr, pt-PT, pt, es-ES, es")
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ WebRTC –º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –≤–∞—à IP-–∞–¥—Ä–µ—Å –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏
    firefox_options.set_preference("dom.webnotifications.enabled", False)
    # firefox_options.set_preference("media.peerconnection.enabled", False)
    # PROXY
    # if PROXY:
    #     proxy_ip, proxy_port = PROXY.split(":")
    #     firefox_options.set_preference("network.proxy.type", 1)
    #     firefox_options.set_preference("network.proxy.http", proxy_ip)
    #     firefox_options.set_preference("network.proxy.http_port", int(proxy_port))
    #     firefox_options.set_preference("network.proxy.ssl", proxy_ip)
    #     firefox_options.set_preference("network.proxy.ssl_port", int(proxy_port))

    firefox_options.set_preference("media.volume_scale", "0.0")
    # —Å–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebDriver –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Firefox
    firefox_options.set_preference("dom.webdriver.enabled", False)
    # –í–∫–ª—é—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    firefox_options.set_preference("privacy.trackingprotection.enabled", True)
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebGL
    firefox_options.set_preference("webgl.disabled", True)
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –∏ —Ñ–æ—Ä–º
    firefox_options.set_preference("signon.rememberSignons", False)
    firefox_options.set_preference("browser.formfill.enable", False)
    # –û—Ç–∫–ª—é—á–∞–µ–º resistFingerprinting
    firefox_options.set_preference("privacy.resistFingerprinting", False)
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞ –∏ cookies
    firefox_options.set_preference("browser.cache.disk.enable", False) 
    firefox_options.set_preference("network.cookie.cookieBehavior", 2)

    ser = Service(executable_path=FIREFOX_DRIVER_PATH)
    driver = webdriver.Firefox(service=ser, options=firefox_options)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    window_size = emulation_settings["windowSize"].split(',')
    driver.set_window_size(int(window_size[0]), int(window_size[1]))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –£–∫—Ä–∞–∏–Ω—ã "Europe/Kiev" - –Æ–∂–Ω–æ–π –ê—Ñ—Ä–∏–∫–∏ "Africa/Johannesburg"
    # https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D1%87%D0%B0%D1%81%D0%BE%D0%B2%D1%8B%D1%85_%D0%BF%D0%BE%D1%8F%D1%81%D0%BE%D0%B2_%D0%BF%D0%BE_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B0%D0%BC
    set_timezone(driver, "Europe/Kiev")

    # driver.maximize_window()

    return driver


def set_timezone(driver, timezone):
    tz = pytz.timezone(timezone)
    now = datetime.datetime.now(tz)
    timezone_offset = now.strftime('%z')
    script = f"return new Date().toLocaleString('en-US', {{timeZone: '{timezone}'}});"
    driver.execute_script(script)
    driver.execute_script(f"Date.prototype.getTimezoneOffset = function(){{return {timezone_offset[:-2]}}};")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cookies (–ø—Ä–∏–º–µ—Ä)
def load_social_media_cookies(driver):
    driver.get("https://example.com") # URL —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cookies


def main():

    modem = ModemController("http://192.168.8.1")
    addresses = get_random_addresses(URLS_ADRESS)

    for address in addresses:
        driver = create_driver_with_emulation(PROXY, FIREFOX_DRIVER_PATH)
        try:
            driver.get("https://books.google.com/?authuser=0")
            try:
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
            except Exception as e:
                print(f"–≠–ª–µ–º–µ–Ω—Ç <body> –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            time.sleep(3)

            driver.get("https://whoer.net/ru")
            # driver.get("https://google.com/")
            # driver.get("https://ifconfig.me/")
            # driver.get("https://www.whatismybrowser.com/")
            # driver.get("https://browserleaks.com/webrtc")
            # driver.get("https://www.browserscan.net/webrtc")
            # driver.get("https://browserleaks.com/")
            
            driver.get("https://2ip.ua/ru/")
            
            try:
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
            except Exception as e:
                print(f"–≠–ª–µ–º–µ–Ω—Ç <body> –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            time.sleep(3)

            try:
                driver.get(address)
                try:
                    WebDriverWait(driver, 50).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "tactile-searchbox-input")))
                except Exception as e:
                    print(f"–≠–ª–µ–º–µ–Ω—Ç (tactile-searchbox-input) –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                time.sleep(3)

                inputs = driver.find_elements(By.CLASS_NAME, "tactile-searchbox-input")
                if len(inputs) > 1:
                    input_field = inputs[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                else:
                    print("–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç 'tactile-searchbox-input' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue
                time.sleep(4)
                input_field.click()
                random_pin = random.choice(BUSINESS_PIN)
                time.sleep(3)

                input_field.send_keys(random_pin)
                time.sleep(3)
                input_field.send_keys(Keys.ENTER)
                time.sleep(10)
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º aria-label —Ä–∞–≤–Ω—ã–º "–ü–∞—Ä–∫–æ–≤–∫–∏"
                button_parkovka = driver.find_element(By.CSS_SELECTOR, 'button[aria-label="–ü–∞—Ä–∫–æ–≤–∫–∏"]')
                time.sleep(4)
                button_parkovka.click()
                time.sleep(10)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                driver.back()
                time.sleep(5)
                print(random_pin)


            except (NoSuchElementException, ElementNotInteractableException, ElementClickInterceptedException, TimeoutException) as e:
                print(f"Error processing {address}: {e}")

        finally:
            driver.quit()
            modem.main_restart()
            time.sleep(5)

if __name__ == '__main__':
    main()
    print('ALL OK')
